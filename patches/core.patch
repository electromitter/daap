Index: com/limegroup/gnutella/ActivityCallback.java
===================================================================
RCS file: /cvs/core/com/limegroup/gnutella/ActivityCallback.java,v
retrieving revision 1.57
diff -u -r1.57 ActivityCallback.java
--- com/limegroup/gnutella/ActivityCallback.java	12 May 2004 15:49:56 -0000	1.57
+++ com/limegroup/gnutella/ActivityCallback.java	5 Aug 2004 10:03:59 -0000
@@ -115,7 +115,14 @@
      *  exists. 
      */
     public void addSharedFile(final FileDesc file, final File parent);
-
+    
+    /**
+     * Notifies the GUI when a FileDesc was either added, removed, 
+     * changed or renamed. This event is triggered by FileManager
+     * or MetaFileManager.
+     */
+    public void handleFileManagerEvent(FileManagerEvent evt);
+    
     /**
      * Notifies the GUI that the given shared file has new information.
      *
Index: com/limegroup/gnutella/FileManager.java
===================================================================
RCS file: /cvs/core/com/limegroup/gnutella/FileManager.java,v
retrieving revision 1.147
diff -u -r1.147 FileManager.java
--- com/limegroup/gnutella/FileManager.java	4 Aug 2004 22:44:41 -0000	1.147
+++ com/limegroup/gnutella/FileManager.java	5 Aug 2004 10:04:02 -0000
@@ -317,7 +317,6 @@
         return (FileDesc)_files.get(i);
     }
 
-
     /**
      * Determines whether or not the specified index is valid.  The index
      * is valid if it is within range of the number of files shared, i.e.,
@@ -536,7 +535,7 @@
      * will be ignored.<p>
 	 *
      * This method is thread-safe but non-blocking.  When the method returns,
-     * the directory and extension settings used by addFileIfShared() are
+     * the directory and extension settings used by addFile() are
      * initialized.  However, files will actually be indexed asynchronously in
      * another thread.  This is useful because indexing may take up to 30
      * seconds or so if sharing many files.  If loadSettings is subsequently
@@ -781,19 +780,31 @@
         }
     }
     
-
+     /**
+      * @modifies this
+      * @effects adds the given file to this, if it exists in a shared 
+      *  directory and has a shared extension.  Returns true iff the file
+      *  was actually added.  <b>WARNING: this is a potential security 
+      *  hazard.</b> 
+      *
+      * @return the <tt>FileDesc</tt> for the new file if it was successfully 
+      *  added, otherwise <tt>null</tt>
+      */
+    public FileDesc addFileIfShared(File file) {
+        return addFileIfShared(file, true);
+    }
+    
     /**
-     * @modifies this
-     * @effects adds the given file to this, if it exists in a shared 
-     *  directory and has a shared extension.  Returns true iff the file
-     *  was actually added.  <b>WARNING: this is a potential security 
-     *  hazard.</b> 
-     *
-     * @return the <tt>FileDesc</tt> for the new file if it was successfully 
-     *  added, otherwise <tt>null</tt>
+     * The actual implementation of addFileIfShared(File)
+     * @param file the file to add
+     * @param notify if true notifies the frontend via 
+     * ActivityCallback.handleFileManagerEvent() about
+     * the Event
+     * @return Returns FileDesc or null
      */
-	public FileDesc addFileIfShared(File file) {
-        //Make sure capitals are resolved properly, etc.
+    protected FileDesc addFileIfShared(File file, boolean notify) {
+        
+        	// Make sure capitals are resolved properly, etc.
         File f = null;
         try {
             f = FileUtils.getCanonicalFile(file);
@@ -801,7 +812,7 @@
                 return null;
         } catch (IOException e) {
             return null;
-		}
+	}
         File dir = FileUtils.getParentFile(f);
         if (dir==null) 
             return null;
@@ -822,9 +833,17 @@
             fd = null;
         }
 
+        // Notify the GUI...
+        if (notify && fd != null) {
+            FileManagerEvent evt = new FileManagerEvent(this, 
+                                            FileManagerEvent.ADD, 
+                                            new FileDesc[]{fd});
+                                            
+            RouterService.getCallback().handleFileManagerEvent(evt);
+        }
+        
         return fd;
-	}
-
+    }
 
     /**
      * @modifies this
@@ -836,8 +855,16 @@
      * @return the <tt>FileDesc</tt> for the new file if it was successfully 
      *  added, otherwise <tt>null</tt>
      */
-	public abstract FileDesc addFileIfShared(File file, List metadata);
-
+    public FileDesc addFileIfShared(File file, List metadata) {
+        return addFileIfShared(file, metadata, true);
+    }
+    
+    /**
+     * The actual implemenation of addFileIfShared(File file, List metadata)
+     */
+    protected abstract FileDesc addFileIfShared(File file, List metadata, boolean notify);
+    
+    
     /**
      * @requires the given file exists and is in a shared directory
      * @modifies this
@@ -1064,21 +1091,37 @@
         URN oldURN = getURNForFile(f);
         CreationTimeCache ctCache = CreationTimeCache.instance();
         Long cTime = ctCache.getCreationTime(oldURN);
-        FileDesc removed = removeFileIfShared(f);
+        FileDesc removed = removeFileIfShared(f, false);
         if( removed == null ) // nothing removed, exit.
             return null;
-        FileDesc fd = addFileIfShared(f);
+        FileDesc fd = addFileIfShared(f, false);
         //re-populate the ctCache
         if ((fd != null) && (cTime != null)) { 
             synchronized (ctCache) {
-                ctCache.removeTime(fd.getSHA1Urn()); //addFile() put lastModified
+                ctCache.removeTime(fd.getSHA1Urn()); //createFileDesc() put lastModified
                 ctCache.addTime(fd.getSHA1Urn(), cTime.longValue());
                 ctCache.commitTime(fd.getSHA1Urn());
             }
         }
+        
+        // Notify the GUI about the changes...
+        FileManagerEvent evt = null;
+        
+        if (fd != null) {
+            evt = new FileManagerEvent(this, 
+                                       FileManagerEvent.CHANGE, 
+                                       new FileDesc[]{removed,fd}); 
+        } else {
+            evt = new FileManagerEvent(this, 
+                                       FileManagerEvent.REMOVE, 
+                                       new FileDesc[]{removed});
+        }
+        
+        RouterService.getCallback().handleFileManagerEvent(evt);
+        
         return fd;
     }
-
+    
     /**
      * @modifies this
      * @effects ensures the first instance of the given file is not
@@ -1088,6 +1131,13 @@
      *  disk.
      */
     public synchronized FileDesc removeFileIfShared(File f) {
+        return removeFileIfShared(f, true);
+    }
+    
+    /**
+     * The actual implementation of removeFileIfShared(File)
+     */
+    protected synchronized FileDesc removeFileIfShared(File f, boolean notify) {
         repOk();
         
         //Take care of case, etc.
@@ -1155,6 +1205,16 @@
             CreationTimeCache.instance().removeTime(fd.getSHA1Urn());
   
         repOk();
+        
+        // Notify the GUI...
+        if (notify && fd != null) {
+            FileManagerEvent evt = new FileManagerEvent(this, 
+                                            FileManagerEvent.REMOVE, 
+                                            new FileDesc[]{fd});
+                                            
+            RouterService.getCallback().handleFileManagerEvent(evt);
+        }
+        
         return fd;
     }
     
@@ -1198,15 +1258,25 @@
      */
     public synchronized boolean renameFileIfShared(File oldName,
                                                    File newName) {
-        FileDesc fd = getFileDescForFile(oldName);
-        if( fd == null )
+        FileDesc removed = getFileDescForFile(oldName);
+        if( removed == null )
             return false;
         List xmlDocs = new LinkedList();
-        xmlDocs.addAll(fd.getLimeXMLDocuments());            
-        fd = removeFileIfShared(oldName);
-        Assert.that( fd != null, "invariant broken.");
+        xmlDocs.addAll(removed.getLimeXMLDocuments());            
+        removed = removeFileIfShared(oldName, false);
+        Assert.that( removed != null, "invariant broken.");
         // hash didn't change so no need to re-input creation time
-        fd = addFileIfShared(newName, xmlDocs);
+        FileDesc fd = addFileIfShared(newName, xmlDocs, false);
+        
+        // Notify the GUI...
+        if (fd != null) {
+            FileManagerEvent evt = new FileManagerEvent(this, 
+                                            FileManagerEvent.RENAME, 
+                                            new FileDesc[]{removed,fd});
+                                            
+            RouterService.getCallback().handleFileManagerEvent(evt);
+        }
+        
         return (fd != null);
     }
 
@@ -1251,7 +1321,9 @@
         if (fileLength>Integer.MAX_VALUE || fileLength<=0) 
         	return false;
         
-        if (file.isDirectory() || !file.canRead() || file.isHidden() ) 
+        // we don't check for hidden files because this feature was not
+        // supported in 1.1.8
+        if (file.isDirectory() || !file.canRead() ) 
             return false;        
         if (!file.getName().toUpperCase().startsWith("LIMEWIRE") && 
             !hasExtension(file.getName())) {
Index: com/limegroup/gnutella/Main.java
===================================================================
RCS file: /cvs/core/com/limegroup/gnutella/Main.java,v
retrieving revision 1.80
diff -u -r1.80 Main.java
--- com/limegroup/gnutella/Main.java	12 May 2004 15:49:56 -0000	1.80
+++ com/limegroup/gnutella/Main.java	5 Aug 2004 10:04:02 -0000
@@ -224,6 +224,8 @@
 
 	public void addSharedFile(FileDesc file, File parent) {}
 	
+	public void handleFileManagerEvent(FileManagerEvent evt) {}
+	
 	public void handleSharedFileUpdate(File file) {}
 
 	public void clearSharedFiles() {}
Index: com/limegroup/gnutella/settings/SettingsFactory.java
===================================================================
RCS file: /cvs/core/com/limegroup/gnutella/settings/SettingsFactory.java,v
retrieving revision 1.38
diff -u -r1.38 SettingsFactory.java
--- com/limegroup/gnutella/settings/SettingsFactory.java	2 Aug 2004 19:20:51 -0000	1.38
+++ com/limegroup/gnutella/settings/SettingsFactory.java	5 Aug 2004 10:04:03 -0000
@@ -28,8 +28,8 @@
     private LongSetting LAST_EXPIRE_TIME = null;
     
     /** 
-	 * <tt>File</tt> object from which settings are loaded and saved 
-	 */    
+     * <tt>File</tt> object from which settings are loaded and saved 
+     */    
     private File SETTINGS_FILE;
     
     private final String HEADING;
@@ -42,7 +42,7 @@
     /**
      * The <tt>Properties</tt> instance containing all settings.
      */
-	protected final Properties PROPS = new Properties(DEFAULT_PROPS);
+    protected final Properties PROPS = new Properties(DEFAULT_PROPS);
     
     /* List of all settings associated with this factory 
      * LOCKING: must hold this monitor
@@ -60,55 +60,55 @@
 
     private boolean expired = false;
     
-	/**
-	 * Creates a new <tt>SettingsFactory</tt> instance with the specified file
-	 * to read from and write to.
-	 *
-	 * @param settingsFile the file to read from and to write to
-	 */
-	SettingsFactory(File settingsFile) {
+    /**
+     * Creates a new <tt>SettingsFactory</tt> instance with the specified file
+     * to read from and write to.
+     *
+     * @param settingsFile the file to read from and to write to
+     */
+    SettingsFactory(File settingsFile) {
         this(settingsFile, "");
     }
     
-	/**
-	 * Creates a new <tt>SettingsFactory</tt> instance with the specified file
-	 * to read from and write to.
-	 *
-	 * @param settingsFile the file to read from and to write to
+    /**
+     * Creates a new <tt>SettingsFactory</tt> instance with the specified file
+     * to read from and write to.
+     *
+     * @param settingsFile the file to read from and to write to
      * @param heading heading to use when writing property file
-	 */
-	SettingsFactory(File settingsFile, String heading) {
+     */
+    SettingsFactory(File settingsFile, String heading) {
         SETTINGS_FILE = settingsFile;
         if(SETTINGS_FILE.isDirectory()) SETTINGS_FILE.delete();
         HEADING = heading;
-		reload();
-	}
-	
-	/**
-	 * Returns the iterator over the settings stored in this factory.
-	 *
-	 * LOCKING: The caller must ensure that this factory's monitor
-	 *   is held while iterating over the iterator.
-	 */
-	public synchronized Iterator iterator() {
-	    return settings.iterator();
-	}
+        reload();
+    }
+    
+    /**
+     * Returns the iterator over the settings stored in this factory.
+     *
+     * LOCKING: The caller must ensure that this factory's monitor
+     *   is held while iterating over the iterator.
+     */
+    public synchronized Iterator iterator() {
+        return settings.iterator();
+    }
 
-	/**
-	 * Reloads the settings with the predefined settings file from
+    /**
+     * Reloads the settings with the predefined settings file from
      * disk.
-	 */
-	public synchronized void reload() {
-		// If the props file doesn't exist, the init sequence will prompt
-		// the user for the required values, so return.  If this is not 
-		// loading limewire.props, but rather something like themes.txt,
-		// we also return, as attempting to load an invalid file will
-		// not do any good.
-		if(!SETTINGS_FILE.isFile()) {
-		    setExpireValue();
-		    return;
+     */
+    public synchronized void reload() {
+        // If the props file doesn't exist, the init sequence will prompt
+        // the user for the required values, so return.  If this is not 
+        // loading limewire.props, but rather something like themes.txt,
+        // we also return, as attempting to load an invalid file will
+        // not do any good.
+        if(!SETTINGS_FILE.isFile()) {
+            setExpireValue();
+            return;
         }
-		FileInputStream fis = null;
+        FileInputStream fis = null;
         try {
             fis = new FileInputStream(SETTINGS_FILE);
             // Loading properties can cause problems if the
@@ -127,7 +127,7 @@
                 MessageService.showError("ERROR_PROPS_CORRUPTED");
             }
         } catch(IOException e) {
-			ErrorService.error(e);
+            ErrorService.error(e);
             // the default properties will be used -- this is fine and expected
         } finally {
             if( fis != null ) {
@@ -145,12 +145,12 @@
         }
         
         setExpireValue();
-	}
-	
-	/**
-	 * Sets the last expire time if not already set.
-	 */
-	private synchronized void setExpireValue() {
+    }
+    
+    /**
+     * Sets the last expire time if not already set.
+     */
+    private synchronized void setExpireValue() {
         // Note: this has only an impact on launch time when this
         // method is called by the constructor of this class!
         if (LAST_EXPIRE_TIME == null) {
@@ -165,28 +165,28 @@
             if (expired)
                 LAST_EXPIRE_TIME.setValue(System.currentTimeMillis());
         }
-    }	    
-	
-	/**
-	 * Changes the backing file to use for this factory.
-	 */
+    }       
+    
+    /**
+     * Changes the backing file to use for this factory.
+     */
     public synchronized void changeFile(File toUse) {
         SETTINGS_FILE = toUse;
         if(SETTINGS_FILE.isDirectory()) SETTINGS_FILE.delete();
         revertToDefault();
         reload();
     }
-	
-	/**
-	 * Reverts all settings to their factory defaults.
-	 */
-	public synchronized void revertToDefault() {
-	    Iterator ii = settings.iterator();
-	    while( ii.hasNext() ) {
-	        Setting set = (Setting)ii.next();
-	        set.revertToDefault();
-	    }
-	}
+    
+    /**
+     * Reverts all settings to their factory defaults.
+     */
+    public synchronized void revertToDefault() {
+        Iterator ii = settings.iterator();
+        while( ii.hasNext() ) {
+            Setting set = (Setting)ii.next();
+            set.revertToDefault();
+        }
+    }
     
     /**
      * Save setting information to property file
@@ -232,7 +232,7 @@
         } catch(FileNotFoundException e) {
             ErrorService.error(e);
         } catch (IOException e) {
-			ErrorService.error(e);
+            ErrorService.error(e);
         } finally {
             if ( out != null ) {
                 try {
@@ -249,14 +249,14 @@
         return PROPS;
     }
     
-	/**
-	 * Creates a new <tt>StringSetting</tt> instance with the specified
-	 * key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
-	public synchronized StringSetting createStringSetting(String key, 
+    /**
+     * Creates a new <tt>StringSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized StringSetting createStringSetting(String key, 
                                                           String defaultValue) {
         StringSetting result = 
             new StringSetting(DEFAULT_PROPS, PROPS, key, defaultValue);
@@ -269,20 +269,20 @@
      */
     public synchronized StringSetting createSettableStringSetting(String key,
                 String defaultValue, String simppKey) {
-		StringSetting result =  new StringSetting(
+        StringSetting result =  new StringSetting(
                             DEFAULT_PROPS, PROPS, key, defaultValue, simppKey);
         handleSettingInternal(result, simppKey);
         return result;
     }
 
-	/**
-	 * Creates a new <tt>BooleanSetting</tt> instance with the specified
-	 * key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
-	public synchronized BooleanSetting createBooleanSetting(String key, 
+    /**
+     * Creates a new <tt>BooleanSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized BooleanSetting createBooleanSetting(String key, 
                                                         boolean defaultValue) {
         BooleanSetting result =
           new BooleanSetting(DEFAULT_PROPS, PROPS, key, defaultValue);
@@ -295,20 +295,20 @@
      */
     public synchronized BooleanSetting createSettableBooleanSetting(String key, 
               boolean defaultValue, String simppKey) {
-		BooleanSetting result = new BooleanSetting(
+        BooleanSetting result = new BooleanSetting(
                            DEFAULT_PROPS, PROPS, key, defaultValue, simppKey);
         handleSettingInternal(result, simppKey);
         return result;
-	}
+    }
 
-	/**
-	 * Creates a new <tt>IntSetting</tt> instance with the specified
-	 * key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
-	public synchronized IntSetting createIntSetting(String key, 
+    /**
+     * Creates a new <tt>IntSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized IntSetting createIntSetting(String key, 
                                                          int defaultValue) {
         IntSetting result = 
             new IntSetting(DEFAULT_PROPS, PROPS, key, defaultValue);
@@ -318,23 +318,23 @@
     
     public synchronized IntSetting createSettableIntSetting(String key, 
                         int defaultValue, String simppKey, int max, int min) {
-		IntSetting result = new IntSetting(
+        IntSetting result = new IntSetting(
                    DEFAULT_PROPS, PROPS, key, defaultValue, simppKey, max, min);
         handleSettingInternal(result, simppKey);
         return result;
-	}
+    }
 
 
-	/**
-	 * Creates a new <tt>ByteSetting</tt> instance with the specified
-	 * key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
-	public synchronized ByteSetting createByteSetting(String key, 
+    /**
+     * Creates a new <tt>ByteSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized ByteSetting createByteSetting(String key, 
                                                       byte defaultValue) {
-		ByteSetting result = 
+        ByteSetting result = 
              new ByteSetting(DEFAULT_PROPS, PROPS, key, defaultValue);
         handleSettingInternal(result, null);
         return result;
@@ -342,23 +342,23 @@
     
     public synchronized ByteSetting createSettableByteSetting(String key, 
                       byte defaultValue, String simppKey, byte max, byte min) {
-		ByteSetting result = new ByteSetting(
+        ByteSetting result = new ByteSetting(
              DEFAULT_PROPS, PROPS, key, defaultValue, simppKey, max, min);
         handleSettingInternal(result, simppKey);
         return result;
-	}
+    }
 
 
-	/**
-	 * Creates a new <tt>LongSetting</tt> instance with the specified
-	 * key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
-	public synchronized LongSetting createLongSetting(String key, 
+    /**
+     * Creates a new <tt>LongSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized LongSetting createLongSetting(String key, 
                                                       long defaultValue) {
-		 LongSetting result = 
+         LongSetting result = 
              new LongSetting(DEFAULT_PROPS, PROPS, key, defaultValue);
          handleSettingInternal(result, null);
          return result;
@@ -366,30 +366,30 @@
     
     public synchronized LongSetting createSettableLongSetting(String key,
                        long defaultValue, String simppKey, long max, long min) {
-		 LongSetting result = 
+         LongSetting result = 
              new LongSetting(DEFAULT_PROPS, PROPS, key, defaultValue, 
                                                             simppKey, max, min);
          handleSettingInternal(result, simppKey);
          return result;
-	}
+    }
 
-	/**
-	 * Creates a new <tt>FileSetting</tt> instance with the specified
-	 * key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
-	public synchronized FileSetting createFileSetting(String key, 
+    /**
+     * Creates a new <tt>FileSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized FileSetting createFileSetting(String key, 
                                                       File defaultValue) {
-	    String parentString = defaultValue.getParent();
-	    if( parentString != null ) {
-		    File parent = new File(parentString);
-		    if(!parent.isDirectory())
-		        parent.mkdirs();
+        String parentString = defaultValue.getParent();
+        if( parentString != null ) {
+            File parent = new File(parentString);
+            if(!parent.isDirectory())
+                parent.mkdirs();
         }
 
-		FileSetting result = 
+        FileSetting result = 
             new FileSetting(DEFAULT_PROPS, PROPS, key, defaultValue);
         handleSettingInternal(result, null);
         return result;
@@ -397,29 +397,29 @@
 
     public synchronized FileSetting createSettableFileSetting(String key, 
                       File defaultValue, String simppKey) {
-	    String parentString = defaultValue.getParent();
-	    if( parentString != null ) {
-		    File parent = new File(parentString);
-		    if(!parent.isDirectory())
-		        parent.mkdirs();
+        String parentString = defaultValue.getParent();
+        if( parentString != null ) {
+            File parent = new File(parentString);
+            if(!parent.isDirectory())
+                parent.mkdirs();
         }
 
-		FileSetting result = new FileSetting(
+        FileSetting result = new FileSetting(
                    DEFAULT_PROPS, PROPS, key, defaultValue, simppKey);
         handleSettingInternal(result, simppKey);
         return result;
-	}
+    }
 
-	/**
-	 * Creates a new <tt>ColorSetting</tt> instance with the specified
-	 * key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
-	public synchronized ColorSetting createColorSetting(String key, 
+    /**
+     * Creates a new <tt>ColorSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized ColorSetting createColorSetting(String key, 
                                                         Color defaultValue) {
-		ColorSetting result = 
+        ColorSetting result = 
         ColorSetting.createColorSetting(DEFAULT_PROPS, PROPS, key,defaultValue);
         handleSettingInternal(result, null);
         return result;
@@ -427,12 +427,12 @@
 
     public synchronized ColorSetting createSettableColorSetting(String key, 
                    Color defaultValue, String simppKey) {
-		ColorSetting result = 
+        ColorSetting result = 
         ColorSetting.createColorSetting(DEFAULT_PROPS, PROPS, key, 
                                         defaultValue, simppKey);
         handleSettingInternal(result, simppKey);
         return result;
-	}
+    }
 
     /**
      * Creates a new <tt>CharArraySetting</tt> instance for a character array 
@@ -460,15 +460,15 @@
     }
     
     /**
-	 * Creates a new <tt>FloatSetting</tt> instance with the specified
-	 * key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
-	public synchronized FloatSetting createFloatSetting(String key, 
+     * Creates a new <tt>FloatSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized FloatSetting createFloatSetting(String key, 
                                                         float defaultValue) {
-		FloatSetting result = 
+        FloatSetting result = 
             new FloatSetting(DEFAULT_PROPS, PROPS, key, defaultValue);
         handleSettingInternal(result, null);
         return result;
@@ -476,11 +476,11 @@
 
     public synchronized FloatSetting createSettableFloatSetting(String key, 
                    float defaultValue, String simppKey, float max, float min) {
-		FloatSetting result = new FloatSetting(
+        FloatSetting result = new FloatSetting(
                   DEFAULT_PROPS, PROPS, key, defaultValue, simppKey, max, min);
         handleSettingInternal(result, simppKey);
         return result;
-	}
+    }
     
     /**
      * Creates a new <tt>StringArraySetting</tt> instance for a String array 
@@ -532,45 +532,45 @@
     }
     
     /**
-	 * Creates a new expiring <tt>BooleanSetting</tt> instance with the
-	 * specified key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting 
+     * Creates a new expiring <tt>BooleanSetting</tt> instance with the
+     * specified key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting 
      */
-	public synchronized BooleanSetting createExpirableBooleanSetting(String key,
+    public synchronized BooleanSetting createExpirableBooleanSetting(String key,
                                                         boolean defaultValue) {
         BooleanSetting result = createBooleanSetting(key, defaultValue);
         
         if (expired)
             result.revertToDefault();
         return result;
-	}
+    }
     
     /**
-	 * Creates a new expiring <tt>IntSetting</tt> instance with the specified
-	 * key and default value.
-	 *
-	 * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
-	public synchronized IntSetting createExpirableIntSetting(String key, 
+     * Creates a new expiring <tt>IntSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized IntSetting createExpirableIntSetting(String key, 
                                                              int defaultValue) {
-		IntSetting result = createIntSetting(key, defaultValue);
+        IntSetting result = createIntSetting(key, defaultValue);
         
         if (expired)
             result.revertToDefault();
         
         return result;
-	}
+    }
     
     /**
      * Creates a new <tt>FontNameSetting</tt> instance with the specified
      * key and default value.
      *
      * @param key the key for the setting
-	 * @param defaultValue the default value for the setting
-	 */
+     * @param defaultValue the default value for the setting
+     */
     public synchronized FontNameSetting createFontNameSetting(String key, 
                                                            String defaultValue){
         FontNameSetting result = 
@@ -585,8 +585,31 @@
         new FontNameSetting(DEFAULT_PROPS, PROPS, key, defaultValue, simppKey);
         handleSettingInternal(result, simppKey);
         return result;
- 	}
+    }
+    
+    /**
+     * Creates a new <tt>PasswordSetting</tt> instance with the specified
+     * key and default value.
+     *
+     * @param key the key for the setting
+     * @param defaultValue the default value for the setting
+     */
+    public synchronized PasswordSetting createPasswordSetting(
+            String key, String defaultValue) {
+        PasswordSetting result = 
+            new PasswordSetting(DEFAULT_PROPS, PROPS, key, defaultValue);
+        handleSettingInternal(result, null);
+        return result;
+    }
     
+    // Doesn't make sense. :)
+    /*public synchronized PasswordSetting createSettablePasswordSetting(String key,
+            String defaultValue, String simppKey) {
+        PasswordSetting result =  new PasswordSetting(
+                            DEFAULT_PROPS, PROPS, key, defaultValue, simppKey);
+        handleSettingInternal(result, simppKey);
+        return result;
+    }*/
     
     private synchronized void handleSettingInternal(Setting setting, 
                                                            String simppKey) {
@@ -606,7 +629,7 @@
             //update the mapping of the simpp key to the setting.
             simppKeyToSetting.put(simppKey, setting);
         }
-	}
+    }
     
     /**
      * Package access for getting a loaded setting corresponding to a simppKey
Index: com/limegroup/gnutella/xml/MetaFileManager.java
===================================================================
RCS file: /cvs/core/com/limegroup/gnutella/xml/MetaFileManager.java,v
retrieving revision 1.55
diff -u -r1.55 MetaFileManager.java
--- com/limegroup/gnutella/xml/MetaFileManager.java	27 Jul 2004 20:01:53 -0000	1.55
+++ com/limegroup/gnutella/xml/MetaFileManager.java	5 Aug 2004 10:04:04 -0000
@@ -118,14 +118,14 @@
             }
         }
 
-        FileDesc removed = removeFileIfShared(f);        
+        FileDesc removed = removeFileIfShared(f, false);        
         if(fd != removed) {
             Assert.that(false, 
                 "wanted to remove: " + fd +
                 "\ndid remove: " + removed);
         }
         _needRebuild = true;
-        fd = addFileIfShared(f, xmlDocs);
+        fd = addFileIfShared(f, xmlDocs, false);
         // file may not be shared anymore or may be installer file
         if ((fd != null) && (cTime != null)) { 
             //re-populate the ctCache
@@ -135,8 +135,24 @@
                 ctCache.commitTime(fd.getSHA1Urn());
             }
         }
+        
+        // Notify the GUI about the changes...
+        FileManagerEvent evt = null;
+        
+        if (fd != null) {
+            evt = new FileManagerEvent(this, 
+                                       FileManagerEvent.CHANGE, 
+                                       new FileDesc[]{removed,fd});
+        } else {
+            evt = new FileManagerEvent(this, 
+                                       FileManagerEvent.REMOVE, 
+                                       new FileDesc[]{removed});
+        }
+                                            
+        RouterService.getCallback().handleFileManagerEvent(evt);
+        
         return fd;
-    }
+    }        
     
     /**
      * Finds the audio metadata document in allDocs, and makes it's id3 fields
@@ -192,8 +208,8 @@
      * Removes the LimeXMLDocuments associated with the removed
      * FileDesc from the various LimeXMLReplyCollections.
      */
-    public FileDesc removeFileIfShared(File f) {
-        FileDesc fd = super.removeFileIfShared(f);
+    protected FileDesc removeFileIfShared(File f, boolean notify) {
+        FileDesc fd = super.removeFileIfShared(f, notify);
         // nothing removed, ignore.
         if( fd == null )
             return null;
@@ -228,8 +244,10 @@
      *
      * @return The FileDesc that was added, or null if nothing added.
      */
-	public FileDesc addFileIfShared(File file, List metadata) {
-        FileDesc fd = super.addFileIfShared(file);
+    protected FileDesc addFileIfShared(File file, List metadata, boolean notify) {
+        
+        // do not kick off a FileManagerEvent.ADD event
+        FileDesc fd = super.addFileIfShared(file, false);
         
         // if not added, exit.
         if( fd == null )
@@ -276,6 +294,15 @@
         }
 
         _needRebuild = true;
+        
+        	// Notify the GUI...
+        if (notify && fd != null) {
+            FileManagerEvent evt = new FileManagerEvent(this, 
+                    FileManagerEvent.ADD, new FileDesc[]{fd});
+
+            RouterService.getCallback().handleFileManagerEvent(evt);
+        }
+        
         return fd;
     }
 
Index: com/limegroup/gnutella/FileManagerEvent.java
===================================================================
RCS file: com/limegroup/gnutella/FileManagerEvent.java
diff -N com/limegroup/gnutella/FileManagerEvent.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ com/limegroup/gnutella/FileManagerEvent.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,110 @@
+
+package com.limegroup.gnutella;
+
+import java.util.EventObject;
+
+/**
+ * This class implements a FileManagerEvent which is
+ * used by FileManager and MetaFileManager to notify
+ * the front end about add, remove, rename and change
+ * events in the Library.
+ */
+public class FileManagerEvent extends EventObject {
+    
+    public static final int ADD     = 1;
+    public static final int REMOVE  = 2;
+    public static final int RENAME  = 3;
+    public static final int CHANGE  = 4;
+    
+    private final int kind;
+    private final FileDesc[] files;
+    
+    public FileManagerEvent(FileManager manager, int kind) {
+        this(manager, kind, null);
+    }
+    
+    public FileManagerEvent(FileManager manager, int kind, FileDesc[] files) {
+        super(manager);
+        this.kind = kind;
+        this.files = files;
+    }
+    
+    public int getKind() {
+        return kind;
+    }
+    
+    /**
+     * Note: RENAME and CHANGE events return an array with
+     * two elements. The first element is the previous
+     * FileDesc and the second is the new FileDesc.
+     */
+    public FileDesc[] getFileDesc() {
+        return files;
+    }
+    
+    /**
+     * Returns true if this event is an ADD event
+     */
+    public boolean isAddEvent() {
+        return (kind==ADD);
+    }
+    
+    /**
+     * Returns true if this event is a REMOVE event
+     */
+    public boolean isRemoveEvent() {
+        return (kind==REMOVE);
+    }
+    
+    /**
+     * Returns true if this event is a RENAME (MOVE) 
+     * event
+     */
+    public boolean isRenameEvent() {
+        return (kind==RENAME);
+    }
+    
+    /**
+     * Returns true if this event is a CHANGE (i.e.
+     * when ID3 Tags changed) event.
+     */
+    public boolean isChangeEvent() {
+        return (kind==CHANGE);
+    }
+    
+    public String toString() {
+        StringBuffer buffer = new StringBuffer("FileManagerEvent: [event=");
+        
+        switch(kind) {
+            case ADD:
+                buffer.append("ADD");
+                break;
+            case REMOVE:
+                buffer.append("REMOVE");
+                break;
+            case RENAME:
+                buffer.append("RENAME");
+                break;
+            case CHANGE:
+                buffer.append("CHANGE");
+                break;
+            default:
+                buffer.append("UNKNOWN");
+                break;
+        }
+        
+        if (files != null) {
+            
+            buffer.append(", files=").append(files.length).append("\n");
+            
+            for(int i = 0; i < files.length; i++) {
+                buffer.append(files[i]);
+            }
+            
+        } else {
+            buffer.append(", files=null");
+        }
+        
+        return buffer.append("]").toString();
+    }
+}
Index: com/limegroup/gnutella/settings/DaapSettings.java
===================================================================
RCS file: com/limegroup/gnutella/settings/DaapSettings.java
diff -N com/limegroup/gnutella/settings/DaapSettings.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ com/limegroup/gnutella/settings/DaapSettings.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,118 @@
+
+package com.limegroup.gnutella.settings;
+
+/**
+ * Settings for Digital Audio Access Protocol (DAAP)
+ */
+public class DaapSettings extends LimeProps {
+    
+    private DaapSettings() {
+    }
+    
+    /**
+     * Whether or not DAAP should be enabled
+     */
+    public static BooleanSetting DAAP_ENABLED =
+	FACTORY.createBooleanSetting("DAAP_ENABLED", false);
+	
+    
+    /**
+     * The file types supported by DAAP.
+     */
+    public static StringArraySetting DAAP_SUPPORTED_FILE_TYPES = 
+        FACTORY.createStringArraySetting("DAAP_SUPPORTED_FILE_TYPES", 
+            new String[]{".mp3", ".m4a", ".wav", ".aif", ".aiff", ".m1a"});
+            
+    /**
+     * The name of the Library.
+     */
+    public static StringSetting DAAP_LIBRARY_NAME =
+	FACTORY.createStringSetting("DAAP_LIBRARY_NAME", "LimeWire");
+	
+    /**
+     * The maximum number of simultaneous connections. Note: There
+     * is an audio stream per connection (i.e. there are actually 
+     * DAAP_MAX_CONNECTIONS*2)
+     */
+    public static IntSetting DAAP_MAX_CONNECTIONS =
+        FACTORY.createIntSetting("DAAP_MAX_CONNECTIONS", 5);
+        
+    /**
+     * The port where the DaapServer is running
+     */
+    public static IntSetting DAAP_PORT =
+	FACTORY.createIntSetting("DAAP_PORT", 5214);
+	
+    /**
+     * The fully qualified service type name <code>_daap._tcp.local.</code>.
+     * You shouldn't change this value as iTunes won't see our DaapServer.
+     */
+    public static StringSetting DAAP_TYPE_NAME =
+	FACTORY.createStringSetting("DAAP_TYPE_NAME", "_daap._tcp.local.");
+	
+    /**
+     * The name of the Service. I recommend to set this value to the
+     * same as <code>DAAP_LIBRARY_NAME</code>.<p>
+     * Note: when you're dealing with mDNS then is the actual Service 
+     * name <code>DAAP_SERVICE_NAME.getValue() + "." + 
+     * DAAP_TYPE_NAME.getValue()</code>
+     */
+	public static StringSetting DAAP_SERVICE_NAME =
+		FACTORY.createStringSetting("DAAP_SERVICE_NAME", "LimeWire");
+	
+    /**
+     * This isn't important
+     */
+    public static IntSetting DAAP_WEIGHT 
+        = FACTORY.createIntSetting("DAAP_WEIGHT", 0);
+    
+    /**
+     * This isn't important
+     */
+    public static IntSetting DAAP_PRIORITY 
+        = FACTORY.createIntSetting("DAAP_PRIORITY", 0);
+	
+    /**
+     * Whether or not password protection is enabled
+     */
+    public static BooleanSetting DAAP_REQUIRES_PASSWORD =
+	FACTORY.createBooleanSetting("DAAP_REQUIRES_PASSWORD", false);
+    
+    /**
+     * The password in clear text. A security hazard?
+     */
+    public static PasswordSetting DAAP_PASSWORD =
+	FACTORY.createPasswordSetting("DAAP_PASSWORD", "");
+    
+    /**
+     * Use either BIO (default) or NIO for DAAP
+     */
+    public static BooleanSetting DAAP_USE_NIO = 
+        FACTORY.createBooleanSetting("DAAP_USE_NIO", false);
+    
+    /**
+     * With default JVM settings we start to run out of memory
+     * if the Library becomes greater than 16000 Songs (OSX 10.3,
+     * JVM 1.4.2_04, G5 with 2.5GB of RAM). Therefore I'm limiting
+     * the max size to 10000 Songs.
+     */
+    public static IntSetting DAAP_MAX_LIBRARY_SIZE =
+        FACTORY.createIntSetting("DAAP_MAX_LIBRARY_SIZE", 10000);
+    
+    /**
+     * The number of revisions the Library should keep in the history
+     * (necessary for slowly updating clients and iTunes is quite
+     * slow in that respect).
+     */
+    public static IntSetting DAAP_LIBRARY_REVISIONS =
+        FACTORY.createIntSetting("DAAP_LIBRARY_REVISIONS", 100);
+    
+    /**
+     * If <tt>true</tt> (default) then Library earses entries 
+     * from the eldest to the latest entry automatically from
+     * the revision history table. <b>IT IS A VERY BAD IDEA
+     * TO DISABLE THIS CUZ YOU WOULD WASTE MEMORY!!!</b>
+     */
+    public static BooleanSetting DAAP_LIBRARY_GC =
+        FACTORY.createBooleanSetting("DAAP_LIBRARY_GC", true);
+}
Index: com/limegroup/gnutella/settings/PasswordSetting.java
===================================================================
RCS file: com/limegroup/gnutella/settings/PasswordSetting.java
diff -N com/limegroup/gnutella/settings/PasswordSetting.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ com/limegroup/gnutella/settings/PasswordSetting.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,55 @@
+package com.limegroup.gnutella.settings;
+
+import java.util.Properties;
+
+/**
+ * Class for a password setting.
+ */
+public final class PasswordSetting extends Setting {
+
+    String value;
+
+    /**
+     * Creates a new <tt>PasswordSetting</tt> instance with the specified key
+     * and defualt value.
+     * 
+     * @param key the constant key to use for the setting
+     * @param defaultStr the default value to use for the setting
+     */
+    PasswordSetting(Properties defaultProps, Properties props, String key,
+            String defaultStr) {
+        super(defaultProps, props, key, defaultStr, null);
+    }
+
+    PasswordSetting(Properties defaultProps, Properties props, String key,
+            String defaultStr, String simppKey) {
+        super(defaultProps, props, key, defaultStr, simppKey);
+    }
+
+    /**
+     * Accessor for the value of this setting.
+     * 
+     * @return the value of this setting
+     */
+    public String getValue() {
+        return value;
+    }
+
+    /**
+     * Mutator for this setting.
+     * 
+     * @param str the <tt>String</tt> to store
+     */
+    public void setValue(String str) {
+        super.setValue(str);
+    }
+
+    /**
+     * Load value from property string value
+     * 
+     * @param sValue property string value
+     */
+    protected void loadValue(String sValue) {
+        value = sValue;
+    }
+}
