Index: DaapPasswordPaneItem.java
===================================================================
RCS file: /cvs/gui/com/limegroup/gnutella/gui/options/panes/DaapPasswordPaneItem.java,v
retrieving revision 1.5
diff -u -r1.5 DaapPasswordPaneItem.java
--- DaapPasswordPaneItem.java	19 Dec 2005 17:40:45 -0000	1.5
+++ DaapPasswordPaneItem.java	30 Jan 2006 23:49:00 -0000
@@ -1,5 +1,8 @@
 package com.limegroup.gnutella.gui.options.panes;
 
+import java.awt.Dimension;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
 import java.io.IOException;
 
 import javax.swing.JCheckBox;
@@ -8,24 +11,38 @@
 import com.limegroup.gnutella.gui.DaapManager;
 import com.limegroup.gnutella.gui.LabeledComponent;
 import com.limegroup.gnutella.gui.SizedPasswordField;
+import com.limegroup.gnutella.gui.SizedTextField;
 import com.limegroup.gnutella.settings.DaapSettings;
 
+import de.kapsi.net.daap.DaapUtil;
+
 public final class DaapPasswordPaneItem extends AbstractPaneItem {
 
+    private final String USERNAME_CHECK_BOX_LABEL = 
+        "OPTIONS_ITUNES_DAAP_PASSWORD_USERNAME_CHECKBOX_LABEL";
     
-    private final String CHECK_BOX_LABEL = 
+    private final String PASSWORD_CHECK_BOX_LABEL = 
             "OPTIONS_ITUNES_DAAP_PASSWORD_CHECKBOX_LABEL";
 
-    private final String TEXTFIELD_BOX_LABEL = 
+    private final String USERNAME_BOX_LABEL = 
+        "OPTIONS_ITUNES_DAAP_PASSWORD_USERNAME_LABEL";
+    
+    private final String PASSWORD_BOX_LABEL = 
             "OPTIONS_ITUNES_DAAP_PASSWORD_TEXTFIELD_LABEL";
 
+    private final JCheckBox REQUIRE_USERNAME_CHECK_BOX = new JCheckBox();
+    
     /**
      * Constant for the check box that specifies whether or not downloads 
      * should be automatically cleared.
      */
-    private final JCheckBox CHECK_BOX = new JCheckBox();
+    private final JCheckBox REQUIRE_PASSWORD_CHECK_BOX = new JCheckBox();
 
-    private final JTextField TEXT_FIELD = new SizedPasswordField();
+    /** The Username */
+    private final JTextField USERNAME = new SizedTextField(16, new Dimension(32, 20));
+    
+    /** The Password */
+    private final JTextField PASSWORD = new SizedPasswordField(16, new Dimension(32, 20));
 
     /**
      * The constructor constructs all of the elements of this 
@@ -36,18 +53,57 @@
      */
     public DaapPasswordPaneItem(final String key) {
             super(key);
-            LabeledComponent comp = new LabeledComponent(CHECK_BOX_LABEL,
-                                         CHECK_BOX,
-                                         LabeledComponent.LEFT_GLUE);
-            add(comp.getComponent());
-
-            comp = new LabeledComponent(TEXTFIELD_BOX_LABEL,
-                                         TEXT_FIELD,
-                                         LabeledComponent.RIGHT_GLUE);
-
-            add(comp.getComponent());
+            
+            LabeledComponent usernameCheckBox 
+                = new LabeledComponent(USERNAME_CHECK_BOX_LABEL,
+                            REQUIRE_USERNAME_CHECK_BOX,
+                                 LabeledComponent.LEFT_GLUE);
+            
+            LabeledComponent passwordCheckBox 
+                = new LabeledComponent(PASSWORD_CHECK_BOX_LABEL,
+                                     REQUIRE_PASSWORD_CHECK_BOX,
+                                     LabeledComponent.LEFT_GLUE);
+
+            LabeledComponent username 
+                = new LabeledComponent(USERNAME_BOX_LABEL,
+                                    USERNAME,
+                                    LabeledComponent.LEFT_GLUE);
+
+            LabeledComponent password 
+                = new LabeledComponent(PASSWORD_BOX_LABEL,
+                                     PASSWORD,
+                                     LabeledComponent.LEFT_GLUE);
+            
+            add(passwordCheckBox.getComponent());
+            add(usernameCheckBox.getComponent());
+            add(username.getComponent());
+            add(password.getComponent());
+            
+            REQUIRE_USERNAME_CHECK_BOX.addActionListener(new ActionListener() {
+                public void actionPerformed(ActionEvent evt) {
+                    enable();
+                }
+            });
+            
+            REQUIRE_PASSWORD_CHECK_BOX.addActionListener(new ActionListener() {
+                public void actionPerformed(ActionEvent evt) {
+                    enable();
+                }
+            });
     }
 
+    private void enable() {
+        PASSWORD.setEnabled(REQUIRE_PASSWORD_CHECK_BOX.isSelected());
+        REQUIRE_USERNAME_CHECK_BOX.setEnabled(REQUIRE_PASSWORD_CHECK_BOX.isSelected());
+        
+        if (!REQUIRE_PASSWORD_CHECK_BOX.isSelected()) {
+            REQUIRE_USERNAME_CHECK_BOX.setSelected(false);
+        }
+        
+        USERNAME.setEnabled(REQUIRE_USERNAME_CHECK_BOX.isSelected() 
+                && REQUIRE_PASSWORD_CHECK_BOX.isSelected());
+    }
+    
     /**
      * Defines the abstract method in <tt>AbstractPaneItem</tt>.<p>
      *
@@ -55,10 +111,19 @@
      * window is shown.
      */
     public void initOptions() {
-        CHECK_BOX.setSelected(DaapSettings.DAAP_REQUIRES_PASSWORD.getValue());
-
-        if (DaapSettings.DAAP_REQUIRES_PASSWORD.getValue())
-            TEXT_FIELD.setText(DaapSettings.DAAP_PASSWORD.getValue());
+        
+        REQUIRE_USERNAME_CHECK_BOX.setSelected(DaapSettings.DAAP_REQUIRES_USERNAME.getValue());
+        REQUIRE_PASSWORD_CHECK_BOX.setSelected(DaapSettings.DAAP_REQUIRES_PASSWORD.getValue());
+        
+        if (REQUIRE_USERNAME_CHECK_BOX.isSelected()) {
+            USERNAME.setText(DaapSettings.DAAP_USERNAME.getValue());
+        }
+        
+        if (REQUIRE_PASSWORD_CHECK_BOX.isSelected()) {
+            PASSWORD.setText(DaapSettings.DAAP_PASSWORD.getValue());
+        }
+        
+        enable();
     }
 
     /**
@@ -71,22 +136,42 @@
      */
     public boolean applyOptions() throws IOException {
 
+        final boolean prevRequiresUsername = DaapSettings.DAAP_REQUIRES_USERNAME.getValue();
+        final String prevUsername = DaapSettings.DAAP_USERNAME.getValue();
+        
         final boolean prevRequiresPassword = DaapSettings.DAAP_REQUIRES_PASSWORD.getValue();
         final String prevPassword = DaapSettings.DAAP_PASSWORD.getValue();
         
-        final boolean requiresPassword = CHECK_BOX.isSelected();
-        final String password = TEXT_FIELD.getText().trim();
+        final boolean requiresUsername = REQUIRE_USERNAME_CHECK_BOX.isSelected();
+        final String username = USERNAME.getText().trim();
+        
+        final boolean requiresPassword = REQUIRE_PASSWORD_CHECK_BOX.isSelected();
+        String password = PASSWORD.getText().trim();
+        
+        if (username.equals("") && requiresUsername) { 
+            throw new IOException(); 
+        }
         
         if (password.equals("") && requiresPassword) { 
             throw new IOException(); 
         }
 
-        if ( ! DaapSettings.DAAP_PASSWORD.equals(password))
+        if ( ! DaapSettings.DAAP_USERNAME.getValue().equals(username)) {
+            DaapSettings.DAAP_USERNAME.setValue(username);
+        }
+        
+        if ( ! DaapSettings.DAAP_PASSWORD.equals(password)) {
             DaapSettings.DAAP_PASSWORD.setValue(password);
+        }
+        
+        if (requiresUsername) {
+            password = DaapUtil.calculateHA1(username, password);
+        }
+        
+        if (requiresPassword != prevRequiresPassword 
+                || (requiresPassword && !password.equals(prevPassword))) {
 
-        if (requiresPassword != prevRequiresPassword || 
-                (requiresPassword && !password.equals(prevPassword))) {
-
+            DaapSettings.DAAP_REQUIRES_USERNAME.setValue(requiresUsername);
             DaapSettings.DAAP_REQUIRES_PASSWORD.setValue(requiresPassword);
 
             try {
@@ -100,7 +185,10 @@
                 DaapManager.instance().updateService();
 
             } catch (IOException err) {
-
+                
+                DaapSettings.DAAP_REQUIRES_PASSWORD.setValue(prevRequiresUsername);
+                DaapSettings.DAAP_USERNAME.setValue(prevUsername);
+                
                 DaapSettings.DAAP_REQUIRES_PASSWORD.setValue(prevRequiresPassword);
                 DaapSettings.DAAP_PASSWORD.setValue(prevPassword);
 
@@ -116,8 +204,9 @@
     }
 
     public boolean isDirty() {
-        return DaapSettings.DAAP_REQUIRES_PASSWORD.getValue() != CHECK_BOX.isSelected() ||
-               !DaapSettings.DAAP_PASSWORD.getValue().equals(TEXT_FIELD.getText().trim());
-                
+        return DaapSettings.DAAP_REQUIRES_PASSWORD.getValue() != REQUIRE_PASSWORD_CHECK_BOX.isSelected() ||
+                DaapSettings.DAAP_REQUIRES_USERNAME.getValue() != REQUIRE_USERNAME_CHECK_BOX.isSelected() ||
+                !DaapSettings.DAAP_PASSWORD.getValue().equals(PASSWORD.getText().trim()) ||
+                !DaapSettings.DAAP_USERNAME.getValue().equals(USERNAME.getText().trim());
     }    
 }
